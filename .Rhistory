q()
viewer()
q()
install.packages("kernSmooth")
library("KernSmooth", lib.loc="C:/Users/pavsingh/Documents/R/R-3.1.0/library")
istall.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library("swirl", lib.loc="C:/Users/pavsingh/Documents/R/R-3.1.0/library")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my-sqrt<-sqrt(z-1)
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+C(0,10)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=o.5)
seq(0, 10, by=0.5)
my_seq<-seq(5, 10, length=30)
length(my_seq)
seq(1:length(my_seq))
new_vec<-seq(1:length(my_seq))
length(my_seq)
len<-length(my_seq)
length(my_seq)
info()
skip()
seq(along - my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(C(0, 1, 2), times = 10)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 1), each=10)
rep(c(0, 1, 2), each=10)
num_vect<-c(0.5, 55, -10, 6)
tf<-num_vect[<1]
tf<-num_vect[num_vect<1]
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name<-c(my_char, "Pavitter")
my_name
paste(my_char, collapse=" ")
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(C(1:3), c("x", "y", "z"), sep="")
paste(c(1, 2, 3), c("x", "Y", "Z"), sep="")
paste(1:3, c("x", "Y", "Z"), sep="")
skip()
paste(LETTERS, 1:4, sep="-")
x<-c(44, NA, 5, NA)
x*3
y<-rnorm(1000)
z<-rep(NA, 1000)
my_data<-sample(c(y, z), 100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect<-c(foo=11, bar=2, noef=NA)
vect<-c("foo"=11, "bar"=2, "norf"=NA)
vect
names(vect)
vect2<-c(11, 2, NA)
names(vcet2)<-c("foo", "bar", "norf")
names(vect2)<-c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vcet[c("foo", "bar")]
vect[c("foo", "bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vcetor)<-c(4,5)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data<-data.frames(patients, my_matrix)
my_data<-data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)<-cnames
my_data
2*3+4
4/5
newfunction<- function(x){}
x*2
newfunct<- function(x) {
x*x
}
newfunct(2)
newfunct(4)
q()
y<-10
f<-function(x){}
f<-function(x){
y<-2
Y^2+g(x)
}
g<-function(x){
x*y
}
f(3)
f<-function(x){
y<-2
y^2+g(x)
}
g<-function(x){
x*y
}
f(3)
cube<-function(x,n){
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
pwd
getwd()
setwd("~/GitHub/ProgrammingAssignment2")
source("cachematrix.r"")
m
mat<-matrix(c(4,3,3,2),2,2)
cacheSolve(mat)
mat
source("cachematrix.r"")
source("cachematrix.r")
cacheSolve(mat)
mat<-matrix(c(4,3,3,2),2,2)
cacheSolve(mat)
source("cachematrix.r")
cacheSolve(mat)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mat)
solve(mat)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
